# This is a basic workflow to help you get started with Actions

name: Nuxt Project CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - 'develop'
      - 'feature/**'
  pull_request:
    branches:
      - 'feature/**'
  workflow_dispatch:
    inputs:
      deploy_only:
        description: 'run deploy only ( true / false )'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    if: inputs.deploy_only != 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['14']

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2
      # nuxt build
      - name: Setup Node with cache condition
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: NPM Install dependencies
        run: npm ci
      - name: NPM build
        run: npm run build


      # build image
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
           tags: |
            type=sha,event=branch
            type=ref,event=pr
            type=ref,pattern={{version}},event=tag
            type=sha        

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    name: Deploy to k8s
    runs-on: ubuntu-latest
    needs: build
    steps:
      # checkout repository
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,event=branch
            type=ref,event=pr
            type=ref,pattern={{version}},event=tag
            type=sha 
      # get image-tag
      - run: echo ${{ steps.meta.outputs.tags }}
      # replace yaml image tag
      - env:
          IMAGE_TAG: ${{ steps.meta.outputs.tags }}
        working-directory: ./
        run: |
          envsubst < k8s-staging.yaml > k8s-staging.yaml-temp
          mv k8s-staging.yaml-temp k8s-staging.yaml
      # kubectl apply
      - uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.AOTTER_STAGING_KUBE_CONFIG }}
        with:
          args: apply -f ./k8s-staging.yaml
